<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kosa.Catchvegan.Mapper.ReviewMapper">


    <resultMap id="memberResultMap" type="MemberDTO">
        <id property="memberIdx" column="memberidx" />
        <result property="id" column="id" />
        <result property="password" column="password" />
        <result property="name" column="name" />
        <result property="phone" column="phone" />
        <result property="email" column="email" />
        <result property="veganType" column="vegantype" />
        <result property="withdraw" column="withdraw" />
        <collection resultMap="review" property="reviewDTOList"></collection>
    </resultMap>

    <resultMap id="memberMap" type="MemberDTO">
        <id property="memberIdx" column="memberidx" />
        <result property="id" column="id" />
        <result property="password" column="password" />
        <result property="name" column="name" />
        <result property="phone" column="phone" />
        <result property="email" column="email" />
        <result property="veganType" column="vegantype" />
        <result property="withdraw" column="withdraw" />
    </resultMap>

    <resultMap id="review" type="ReviewDTO">
        <result property="reviewIdx" column="reviewidx"/>
        <result property="visitIdx" column="visitidx"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="rating" column="rating"/>
        <result property="images" column="images"/>
        <association property="memberDTO" resultMap="memberMap"/>
        <association property="restaurantDTO" resultMap="restaurantMap"/>
    </resultMap>

    <resultMap id="restaurantMap" type="RestaurantDTO">
        <result property="name" column="res.name"/>
        <result property="city" column="city"/>
        <result property="images" column="images"></result>
    </resultMap>



    <resultMap id="visitMap" type="VisitDto">
        <result property="visitIdx" column="visitidx"/>
    </resultMap>

    <select id="reviewsFindAll" resultType="ReviewDTO">
        select * from review
    </select>

    <insert id="createReview">
        insert into review
        values(REVIEWSEQ.nextval,#{visitIdx},#{title},#{content},#{rating},#{images})
    </insert>

    <select id="detailReview" resultType="ReviewDTO">
        select * from review where visitidx = #{visitIdx}
    </select>

    <select id="oneReview" resultType="ReviewDTO">
        select * from review where reviewidx = #{reviewIdx}
    </select>

    <update id="updateReview" parameterType="ReviewDTO">
        update review
        set title = #{title},
            content = #{content},
            rating = #{rating},
            images = #{images}
        where reviewidx = #{reviewIdx}
    </update>

    <delete id="deleteReview" >
        delete from review
        where reviewidx = #{reviewIdx}
    </delete>
    <select id="oneMemberAllReview" resultMap="memberResultMap">
        select m.*,rv.reviewidx, rv.visitidx, rv.title, rv.content, rv.rating, rv.images from review rv,visit v,reserve res, member m
        where rv.visitidx(+) = v.visitidx
          and v.reserveidx(+) = res.reserveidx
          and res.memberidx(+) = m.memberidx
          and m.memberidx = #{memberIdx}
    </select>

    <!--한 식당에 대한 리뷰 불러오기-->
    <select id="getReviewList" resultMap="review">
        select r.title, r.content, r.rating, r.images, m.name, r.reviewIdx
              from review r
                 LEFT OUTER JOIN visit v ON r.visitidx=r.visitidx
                 LEFT OUTER JOIN reserve rv ON v.reserveidx=rv.reserveidx
                 LEFT OUTER JOIN restaurant res ON rv.restaurantidx=res.restaurantidx
                 LEFT OUTER JOIN member m ON rv.memberidx=m.memberidx
                                         where res.restaurantidx=#{restaurantIdx}
    </select>


    <!--main에 리뷰 띄우기-->
    <select id="getRecentReview" resultMap="review">

        SELECT *
        FROM (
            SELECT r.title, r.content, r.rating, res.images,
                   m.name, r.reviewIdx, res.name as "res.name", res.restaurantIdx
            FROM review r
            LEFT OUTER JOIN visit v ON r.visitidx=v.visitidx
            LEFT OUTER JOIN reserve rv ON v.reserveidx=rv.reserveidx
            LEFT OUTER JOIN restaurant res ON rv.restaurantidx=res.restaurantidx
            LEFT OUTER JOIN member m ON rv.memberidx=m.memberidx
                    ORDER BY r.reviewIdx DESC
                ) r
                        WHERE ROWNUM &lt;= 5

    </select>

</mapper>